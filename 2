// SPDX-License-Identifier: MIT
 
pragma solidity ^0.8.20;

import "@openzeppelin/contracts-upgradeable@5.0.1/token/ERC1155/ERC1155Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable@5.0.1/access/manager/AccessManagedUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable@5.0.1/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable@5.0.1/proxy/utils/UUPSUpgradeable.sol";

/// @custom:security-contact treebtc@gmail.com
contract Mm is Initializable, ERC1155Upgradeable, AccessManagedUpgradeable, UUPSUpgradeable {
    /// @custom:oz-upgrades-unsafe-allow constructor
    //string public freud="No data";
    constructor() {
        _disableInitializers();
    }
    receive() external payable {}

    // Give out ether to anyone who asks
   /* function withdraw(uint withdraw_amount) public {
        // Limit withdrawal amount
        require(withdraw_amount <= 100000000000000000);

        // Send the amount to the address that requested it
        msg.sender.transfer(withdraw_amount);*/

    function initialize(address initialAuthority) initializer public {
        __ERC1155_init("https://github.com/asggWa");
        __AccessManaged_init(initialAuthority);
        __UUPSUpgradeable_init();
    }

    function setURI(string memory newuri) public restricted {
        _setURI(newuri);
    }

    function _authorizeUpgrade(address newImplementation)
        internal
        restricted
        override
    {}
}
